import React, { useState, useCallback } from "react";
// import { StatusBar } from "expo-status-bar";
import { StyleSheet, SafeAreaView, Text, View } from "react-native";
import { GiftedChat } from "react-native-gifted-chat";
import axios from "axios";

const BOT_avatar = require("./assets/images/master.png");

const BOT = {
  _id: 2,
  name: "Master",
  avatar: BOT_avatar,
};

/* class App extends Component {
  state = {
    messages: [
      {
        _id: 2,
        text: "Haha!! Just Joking! How can I help you?",
        createdAt: new Date(),
        user: BOT,
      },
      {
        _id: 1,
        text: "Parampara, Pratishtha, Anushasan",
        createdAt: new Date(),
        user: BOT,
      },
    ],
    id: 1,
    name: "",
    texty: "",
  };

  handleResponse(result) {
    const FormData = global.FormData;
    const formData = new FormData();
    formData.append("msg", result);
    axios({
      url: "https://sih-dialog-flow.herokuapp.com/",
      method: "POST",
      data: formData,
      headers: {
        Accept: "application/json",
        "Content-Type": "multipart/form-data",
        Authorization: "Basic YnJva2VyOmJyb2tlcl8xMjM=",
      },
    })
      .then(function (response) {
        this.setState({ texty: response.data });
      })
      .catch(function (error) {
        console.log("error:", error);
      });

    this.sendBotResponse(this.state.texty);
  }

  sendBotResponse(text) {
    console.log(text);
    let message = {
      _id: this.state.messages.length + 1,
      text,
      createdAt: new Date(),
      user: BOT,
    };
    this.setState((previousState) => ({
      messages: GiftedChat.append(previousState.messages, [message]),
    }));
  }

  onSend(messages = []) {
    this.setState((previousState) => ({
      messages: GiftedChat.append(previousState.messages, messages),
    }));
    let message = messages[0].text;
    console.log(message);
    this.handleResponse(message);
  }

  onQuickReply(quickreply) {
    this.setState((previousState) => ({
      messages: GiftedChat.append(previousState.messages, quickreply),
    }));
    let message = quickreply[0].value;
    requestQuery(
      message,
      // (result) => this.handleGoogleResponse(result),
      (result) => console.log(result),
      (error) => console.log(error)
    );
  }

  render() {
    return (
      <View style={{ flex: 1, backgroundColor: "white" }}>
        <GiftedChat
          messages={this.state.messages}
          onSend={(message) => this.onSend(message)}
          onQuickReply={(quickreply) => this.onQuickReply(quickreply)}
          user={{ _id: 1 }}
        />
      </View>
    );
  }
}*/
// export default App;

// export default function App() {
//   return (
//     <View style={styles.container}>
//       <Text>Code Artisans</Text>
//       <StatusBar style="auto" />
//     </View>
//   );
// }

// const styles = StyleSheet.create({
//   container: {
//     flex: 1,
//     backgroundColor: "#fff",
//     alignItems: "center",
//     justifyContent: "center",
//   },
// });

const App = () => {
  const [messages, setMessages] = useState([
    {
      _id: 2,
      text: "Haha!! Just Joking! How can I help you?",
      createdAt: new Date(),
      user: BOT,
    },
    {
      _id: 1,
      text: "Parampara, Pratishtha, Anushasan",
      createdAt: new Date(),
      user: BOT,
    },
  ]);
  const [res, setRes] = useState("");

  const handleResponse = (result) => {
    const FormData = global.FormData;
    const formData = new FormData();
    formData.append("msg", result);
    axios({
      url: "https://sih-dialog-flow.herokuapp.com/",
      method: "POST",
      data: formData,
      headers: {
        Accept: "application/json",
        "Content-Type": "multipart/form-data",
        Authorization: "Basic YnJva2VyOmJyb2tlcl8xMjM=",
      },
    })
      .then(({ data }) => {
        setRes(data);
        sendBotResponse(res);
      })
      .catch((error) => {
        console.log("error:", error);
        return;
      });
  };
  const sendBotResponse = (data) => {
    console.log(data);
    let message = {
      _id: messages.length + 1,
      data,
      createdAt: new Date(),
      user: BOT,
    };
    setMessages((prev) => GiftedChat.append(prev, [message]));
  };

  const onSend = useCallback((messages = []) => {
    setMessages((prev) => GiftedChat.append(prev, messages));
    console.log(messages);
    let message = messages[0].text;
    console.log(message);
    handleResponse(message);
  }, []);
  const onQuickReply = (quickreply) => {
    setMessages((prev) => GiftedChat.append(prev, quickreply));
    let message = quickreply[0].value;
    console.log(message);
  };

  return (
    <View style={{ flex: 1, backgroundColor: "white" }}>
      <GiftedChat
        messages={messages}
        onSend={(messages) => onSend(messages)}
        onQuickReply={(quickreply) => onQuickReply(quickreply)}
        user={{ _id: 1 }}
      />
    </View>
  );
};

export default App;
